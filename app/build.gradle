plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 32
    buildToolsVersion "32.0.0"

    defaultConfig {
        applicationId "com.example.techshop_kotlin3"
        minSdkVersion 32
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding = true

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        //freeCompilerArgs = ['-Xjmv-default=enable']
    }
}

dependencies {
    implementation project(path: ':data')

    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // GSON
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // coroutine
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1'

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"

    implementation 'com.squareup.picasso:picasso:2.71828'

    //implementation 'com.google.dagger:dagger:2.33'
    //annotationProcessor 'com.google.dagger:dagger-compiler:2.33'
    def dagger_version = "2.40.5"

    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "com.google.dagger:dagger-android-support:2.27"
    kapt "com.google.dagger:dagger-android-processor:2.27"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation("androidx.appcompat:appcompat:1.5.0")
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


    def paging_version = "3.1.1"

    implementation "androidx.paging:paging-runtime:$paging_version" // For Kotlin use paging-runtime-ktx
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common-ktx:$paging_version" // For Kotlin use paging-common-ktx

    // optional - RxJava support
    implementation "androidx.paging:paging-rxjava2-ktx:$paging_version"


    implementation 'androidx.activity:activity-ktx:1.5.1'
    //implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1 "
    implementation "androidx.fragment:fragment-ktx:1.5.2"

    def room_version = "2.4.3"

    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-paging:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    def work_version = "2.7.1"

    // (Java only)
    implementation("androidx.work:work-runtime:$work_version")

    // Kotlin + coroutines
    implementation("androidx.work:work-runtime-ktx:$work_version")

    // optional - RxJava2 support
    implementation("androidx.work:work-rxjava2:$work_version")

    // optional - GCMNetworkManager support
    implementation("androidx.work:work-gcm:$work_version")

    // optional - Test helpers
    androidTestImplementation("androidx.work:work-testing:$work_version")

    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:$work_version"
}